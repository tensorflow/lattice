book_path: /lattice/_book.yaml
project_path: /lattice/_project.yaml
description: A library for training constrained and interpretable lattice based models. Inject
 domain knowledge into the learning process through constraints on Keras layers.
landing_page:
  custom_css_path: /site-assets/css/style.css
  rows:
  - heading: Flexible, controlled and interpretable ML with lattice based models
    items:
    - classname: devsite-landing-row-50
      description: >
        <p>TensorFlow Lattice is a library that implements constrained and interpretable lattice
        based models. The library enables you to inject domain knowledge into the learning process
        through common-sense or policy-driven
        <a href="./tutorials/shape_constraints">shape constraints</a>. This is done using a
        collection of <a href="./tutorials/keras_layers">Keras layers</a> that can satisfy
        constraints such as monotonicity, convexity and how features interact. The library also
        provides easy to setup <a href="./tutorials/premade_models">premade models</a>.</p>
        <p>With TF Lattice you can use domain knowledge to better extrapolate to the parts of the
        input space not covered by the training dataset. This helps avoid unexpected model behaviour
        when the serving distribution is different from the training distribution.</p>
        <figure>
            <img src="images/model_comparison.png">
        </figure>

      code_block: |
        <pre class = "prettyprint">
        import numpy as np
        import tensorflow as tf
        import tensorflow_lattice as tfl

        model = tf.keras.models.Sequential()
        model.add(
            tfl.layers.ParallelCombination([
                # Monotonic piece-wise linear calibration with bounded output
                tfl.layers.PWLCalibration(
                    monotonicity='increasing',
                    input_keypoints=np.linspace(1., 5., num=20),
                    output_min=0.0,
                    output_max=1.0),
                # Diminishing returns
                tfl.layers.PWLCalibration(
                    monotonicity='increasing',
                    convexity='concave',
                    input_keypoints=np.linspace(0., 200., num=20),
                    output_min=0.0,
                    output_max=2.0),
                # Partially monotonic categorical calibration: calib(0) <= calib(1)
                tfl.layers.CategoricalCalibration(
                    num_buckets=4,
                    output_min=0.0,
                    output_max=1.0,
                    monotonicities=[(0, 1)]),
            ]))
        model.add(
            tfl.layers.Lattice(
                lattice_sizes=[2, 3, 2],
                monotonicities=['increasing', 'increasing', 'increasing'],
                # Trust: model is more responsive to input 0 if input 1 increases
                edgeworth_trusts=(0, 1, 'positive')))
        model.compile(...)
        </pre>

  - classname: devsite-landing-row-cards
    items:
    - heading: "TensorFlow Lattice: Flexible, controlled and interpretable ML"
      image_path: /resources/images/tf-logo-card-16x9.png
      path: https://blog.tensorflow.org/2020/02/tensorflow-lattice-flexible-controlled-and-interpretable-ML.html
      buttons:
      - label: "Read on the TensorFlow blog"
        path: https://blog.tensorflow.org/2020/02/tensorflow-lattice-flexible-controlled-and-interpretable-ML.html
    - heading: "TensorFlow Lattice: Control your ML with monotonicity"
      youtube_id: ABBnNjbjv2Q
      buttons:
      - label: Watch the video
        path: https://www.youtube.com/watch?v=ABBnNjbjv2Q
    - heading: "TF Lattice on GitHub"
      image_path: /resources/images/github-card-16x9.png
      path: https://github.com/tensorflow/lattice
      buttons:
      - label: "View on GitHub"
        path: https://github.com/tensorflow/lattice
